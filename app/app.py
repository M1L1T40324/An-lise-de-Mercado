import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
import numpy as np

st.set_page_config(page_title="An√°lise de Mercado", layout="wide")
st.title("üìà An√°lise de Mercado com Regress√£o e Indicadores Estat√≠sticos")

# Entrada de dados
tickers = st.text_input("Digite os tickers separados por v√≠rgula:", "PETR4.SA, VALE3.SA, ITUB4.SA")
tickers = [t.strip().upper() for t in tickers.split(",") if t.strip()]

periodo = st.selectbox("Selecione o per√≠odo:", ["1mo", "3mo", "6mo", "1y", "2y", "5y", "10y", "max"])
intervalo = st.selectbox("Selecione o intervalo:", ["1d", "1wk", "1mo"])

# Baixar dados
data = yf.download(tickers, period=periodo, interval=intervalo, group_by='ticker', auto_adjust=True)

# Fun√ß√£o auxiliar para corrigir colunas
def corrigir_colunas(df, ticker):
    """Garante que as colunas tenham nomes simples mesmo com MultiIndex."""
    if isinstance(df.columns, pd.MultiIndex):
        df = df[ticker].copy()
    return df

# Loop pelos tickers
for ticker in tickers:
    st.subheader(f"üìä {ticker}")

    try:
        df = corrigir_colunas(data, ticker).dropna()

        # Regress√£o linear simples: dias vs pre√ßos de fechamento
        X = np.arange(len(df)).reshape(-1, 1)
        y = df["Close"].values
        model = LinearRegression().fit(X, y)
        df["Regress√£o"] = model.predict(X)

        # C√°lculo da dist√¢ncia (res√≠duo) entre pre√ßo real e linha de regress√£o
        df["Dist√¢ncia"] = df["Close"] - df["Regress√£o"]

        # C√°lculo do Z-Score
        df["Z_Score"] = (df["Close"] - df["Close"].mean()) / df["Close"].std()
        z_score_atual = df["Z_Score"].iloc[-1]

        # Estat√≠sticas b√°sicas
        col1, col2, col3 = st.columns(3)
        col1.metric("Pre√ßo atual", f"R$ {df['Close'].iloc[-1]:.2f}")
        col2.metric("Z-Score atual", f"{z_score_atual:.2f}")
        col3.metric("Dist√¢ncia atual", f"{df['Dist√¢ncia'].iloc[-1]:.2f}")

        # --- Gr√°fico 1: Candle + Linha de Regress√£o ---
        fig1 = go.Figure()

        # Candle
        fig1.add_trace(go.Candlestick(
            x=df.index,
            open=df["Open"],
            high=df["High"],
            low=df["Low"],
            close=df["Close"],
            name="Candlestick"
        ))

        # Linha de Regress√£o
        fig1.add_trace(go.Scatter(
            x=df.index, y=df["Regress√£o"],
            mode="lines", name="Linha de Regress√£o",
            line=dict(color="orange", width=2)
        ))

        fig1.update_layout(
            title="Candlestick com Linha de Regress√£o",
            xaxis_title="Data", yaxis_title="Pre√ßo (R$)",
            template="plotly_dark",
            hovermode="x unified",
            xaxis_rangeslider_visible=False
        )

        # --- Gr√°fico 2: Varia√ß√£o da dist√¢ncia ---
        fig2 = go.Figure()
        fig2.add_trace(go.Scatter(x=df.index, y=df["Dist√¢ncia"], mode="lines", name="Dist√¢ncia"))
        fig2.update_layout(
            title="Varia√ß√£o da Dist√¢ncia entre o Pre√ßo e a Regress√£o",
            xaxis_title="Data", yaxis_title="Diferen√ßa (R$)",
            template="plotly_dark", hovermode="x unified"
        )

        st.plotly_chart(fig1, use_container_width=True)
        st.plotly_chart(fig2, use_container_width=True)

        # --- Gr√°fico 3: Volume (apenas para per√≠odos ‚â§ 1 ano) ---
        if periodo in ["1mo", "3mo", "6mo", "1y"]:
            fig3 = go.Figure()
            fig3.add_trace(go.Bar(x=df.index, y=df["Volume"], name="Volume"))
            fig3.update_layout(
                title="Volume de Negocia√ß√µes",
                xaxis_title="Data", yaxis_title="Volume",
                template="plotly_dark", hovermode="x unified"
            )
            st.plotly_chart(fig3, use_container_width=True)

    except Exception as e:
        st.error(f"Erro ao processar {ticker}: {e}")
